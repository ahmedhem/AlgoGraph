{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://AlgoGraph/./src/Canvas/Pop-Up/Modal.js","webpack://AlgoGraph/./src/UI.js","webpack://AlgoGraph/./src/Canvas/Graph.js","webpack://AlgoGraph/./src/Canvas/Pair.js","webpack://AlgoGraph/./src/Canvas/Pop-Up/weighted-edge-input-pop-up.js","webpack://AlgoGraph/./src/Canvas/canvasFunctions.js","webpack://AlgoGraph/./src/functions.js","webpack://AlgoGraph/./src/index.js","webpack://AlgoGraph/./src/Canvas/Pop-Up/edge-weights-pop-up.js","webpack://AlgoGraph/./src/Canvas/edge-clicked-handler.js","webpack://AlgoGraph/./src/sidebar/buttons/color-picker.js","webpack://AlgoGraph/./src/sidebar/buttons/Delete.js","webpack://AlgoGraph/./src/Algorithms/Draw-as-tree.js","webpack://AlgoGraph/./src/Canvas/ContextMenu/conterxt-menu.js","webpack://AlgoGraph/./src/listeners.js","webpack://AlgoGraph/./src/sidebar/toolbox.js","webpack://AlgoGraph/./src/sidebar/buttons/Save.js","webpack://AlgoGraph/./src/sidebar/buttons/GraphSetting.js","webpack://AlgoGraph/./src/sidebar/buttons/Clear.js","webpack://AlgoGraph/./src/sidebar/buttons/matrix-input.js","webpack://AlgoGraph/./src/sidebar/buttons/textInput.js"],"sourcesContent":["class Modal {\n  constructor(content = \"\") {\n    this.content = content;\n    this.insert_content(content);\n\n    this.pop_up = document.getElementById(\"Modal\");\n\n    // when the close icon is clicked close the pop-up\n    this.close_icon = document.querySelector(\".hide-Modal\");\n    this.close_icon.onclick = () => (this.pop_up.style.display = \"none\");\n\n    // add eventListener to close the pop-up when the background is clicked\n    window.onclick = (event) => {\n      if (event.target === this.pop_up) this.pop_up.style.display = \"none\";\n    };\n  }\n\n  insert_content(content) {\n    document.querySelector(\"#inserted-content\").innerHTML = content;\n  }\n\n  open(size = 80) {\n    // reset the size of the pop-up to 80%\n    this.changeSize(size);\n    // show the pop-up\n    this.pop_up.style.display = \"block\";\n  }\n\n  close() {\n    this.changeSize(80);\n    this.close_icon.click();\n  }\n\n  // default size is 80%, Min. = 30 and max. 100\n  changeSize(width) {\n    if (width >= 40 && width <= 100) {\n      document.querySelector(\".Modal-content\").style.width = width + \"%\";\n      return true;\n    }\n\n    return false;\n  }\n}\n\n// make it a singleton\nconst modal = new Modal();\nObject.freeze(modal);\n\nexport default modal;\n","// the UI notifier\nclass UiNotifier {\n  constructor() {\n    this.ctx = null;\n    this.canvas = null;\n    this.delete = false;\n    this.isDirected = false;\n    this.isWighted = false;\n    this.popupEdge = null;\n    this.observers = [];\n    // context menu\n    this.MENU_STATUS = 0;\n    this.ContextMenuNode = null;\n    this.MovingMode = false;\n    //default size\n    this.nodeSize = 15;\n    this.nodePicked = null;\n  }\n\n  subscribe(fn) {\n    this.observers.push(fn);\n  }\n\n  unsubscribe(fnToRemove) {\n    this.observers = this.observers.filter((fn) => {\n      if (fn !== fnToRemove) return fn;\n    });\n  }\n\n  fire() {\n    this.observers.forEach((fn) => {\n      fn(this.canvas, this.ctx, this.nodeSize);\n    });\n  }\n}\n\nexport const UI = new UiNotifier();\n","import { UI } from \"../UI\";\n//checked\nexport class GraphPoint {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport class GraphEdge {\n  constructor(startNodeNumber, endNodeNumber) {\n    this.start = startNodeNumber;\n    this.end = endNodeNumber;\n    //...do not allow duplicate values\n    this.weights = new Set();\n  }\n\n  addWeight(weight) {\n    return this.weights.add(weight);\n  }\n\n  removeWeight(weight) {\n    this.weights.delete(weight);\n    if (this.weights.size === 0) return -1;\n  }\n\n  equals(otherEdge) {\n    return this.start === otherEdge.start && this.end === otherEdge.end;\n  }\n\n  toString() {\n    const weights = [...this.weights].join(\", \");\n    return `from ${this.start} to  ${this.end} with weight {${weights}}`;\n  }\n}\n\nclass GraphNode {\n  constructor(position, nodeNumber) {\n    this.position = position;\n    this.number = nodeNumber;\n    this.color = \"#000\";\n    this.edges = new Set();\n  }\n\n  addEdge(endNodeNumber, weight = 1) {\n    const edge = this.getEdge(endNodeNumber);\n    if (!edge) {\n      const newEdge = new GraphEdge(this.number, endNodeNumber);\n      newEdge.addWeight(weight);\n\n      this.edges.add(newEdge);\n      return true;\n    }\n\n    edge.addWeight(weight);\n    return true;\n  }\n\n  //...if called without a weight remove the entire edge\n  //...with a weight remove the weight\n  removeEdge(endNodeNumber, weight) {\n    const edge = this.getEdge(endNodeNumber);\n    if (edge) {\n      if (weight) {\n        let rem = edge.removeWeight(weight);\n        if (rem === -1) this.edges.delete(edge);\n      } else {\n        this.edges.delete(edge);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  getEdge(endNumber) {\n    let edge = null;\n    for (let e of this.edges.keys()) {\n      if (e.end === endNumber) {\n        edge = e;\n      }\n    }\n    return edge;\n  }\n\n  //...remove all the edges between two nodes\n  removeConnection(endNode) {\n    this.removeEdge(endNode);\n    endNode.removeEdge(this);\n  }\n\n  equals(otherNode) {\n    return this.number === otherNode.number;\n  }\n\n  toString() {\n    return this.number;\n  }\n}\n\nexport class Graph {\n  constructor() {\n    this.nodes = new Set();\n    this.nodeCount = 1;\n    this.availableNum = [];\n  }\n\n  addNode(position) {\n    let nodeNumber = null;\n    if (this.availableNum.length !== 0) {\n      nodeNumber = this.availableNum[0];\n      this.availableNum.splice(0, 1);\n    } else {\n      nodeNumber = this.nodeCount;\n    }\n    const newNode = new GraphNode(position, nodeNumber);\n    this.nodes.add(newNode);\n    this.nodeCount++;\n    UI.fire();\n  }\n\n  getNode(number) {\n    let node = null;\n\n    for (let n of this.nodes.keys()) {\n      if (n.number === number) node = n;\n    }\n\n    return node;\n  }\n\n  removeNode(number) {\n    const node = this.getNode(number);\n    const nodeNumber = node.number;\n    for (let n of this.nodes.keys()) {\n      for (let e of n.edges.keys()) {\n        if (e.end === nodeNumber) {\n          this.removeEdge(e.start, e.end);\n        }\n      }\n    }\n    this.availableNum.push(nodeNumber);\n    this.nodes.delete(node);\n    this.nodeCount--;\n    UI.fire();\n  }\n\n  addEdge(startNodeNumber, endNodeNumber, weight = 1) {\n    const start = this.getNode(startNodeNumber);\n    const end = this.getNode(endNodeNumber);\n\n    if (start && end) {\n      start.addEdge(end.number, weight);\n      UI.fire();\n      return true;\n    }\n    return false;\n  }\n\n  removeEdge(startNodeNumber, endNodeNumber, weight) {\n    const start = this.getNode(startNodeNumber);\n    const end = this.getNode(endNodeNumber);\n    const removed = start.removeEdge(end.number, weight);\n    if (removed) UI.fire();\n    return removed;\n  }\n\n  getEdge(startNodeNumber, endNodeNumber) {\n    const start = this.getNode(startNodeNumber);\n    const end = this.getNode(endNodeNumber);\n\n    return start.getEdge(end.number);\n  }\n\n  // TODO implement deep copy for the Graph class\n  deep_copy() {\n    let new_graph = new Graph();\n    // copy data from old graph\n    return new_graph;\n  }\n}\n","import { openPopup } from \"./Pop-Up/weighted-edge-input-pop-up.js\";\nimport { graph } from \"../index.js\";\nimport { GraphEdge } from \"./Graph.js\";\nimport { UI } from \"../UI\";\nexport let pair = {\n  nodes: [],\n  add: function (point) {\n    if (this.nodes.length === 1) {\n      this.nodes.push(point);\n      UI.popupEdge = graph.getEdge(this.nodes[0].number, this.nodes[1].number);\n\n      /***Create new Edge if first time***/\n      if (!UI.popupEdge)\n        UI.popupEdge = new GraphEdge(\n          this.nodes[0].number,\n          this.nodes[1].number,\n        );\n\n      /***check if weighted or un weighted ****/\n      if (UI.isWighted) openPopup();\n      else {\n        graph.addEdge(this.nodes[0].number, this.nodes[1].number);\n        if (!UI.isDirected)\n          graph.addEdge(this.nodes[1].number, this.nodes[0].number);\n      }\n\n      this.nodes = [];\n    } else {\n      this.nodes.push(point);\n    }\n  },\n};\n","import modal from \"./Modal.js\";\nimport { handleWeightInput } from \"../../functions.js\";\n\nexport function openPopup() {\n  modal.insert_content(`\n        <div class=\"weight-container\">\n            <span id=\"weight-input-text\">Want to Add a weight?</span>\n            <input id=\"weight-input\" class=\"\" type=\"number\" min=\"0\" value=\"1\">\n            <button type=\"submit\" class=\"btn cancel\">Confirm</button>\n        </div>\n    `);\n\n  //..listing for enter clicks in the popup input field\n  document.querySelector(\"#weight-input\").addEventListener(\"keyup\", (e) => {\n    if (e.keyCode === 13) {\n      const value = e.target.value;\n      handleWeightInput(value);\n      e.target.value = 1;\n    }\n  });\n\n  document.querySelector(\".cancel\").addEventListener(\"click\", () => {\n    let value = document.querySelector(\"#weight-input\").value;\n    handleWeightInput(value);\n    document.querySelector(\"#weight-input\").value = 1;\n  });\n\n  modal.open();\n  modal.changeSize(50);\n}\n","import { UI } from \"../UI\";\n\nexport function drawNode(ctx, node, num, color = null, size, isReady = null) {\n  const x = node.position.x,\n    y = node.position.y;\n  ctx.beginPath();\n\n  /* Properties of the circle*/\n  ctx.lineWidth = 1.5;\n  ctx.strokeStyle = color ? color : \"#000\";\n  /* Properties of the number inside the center*/\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.font = `${size}px serif`;\n\n  ctx.arc(x, y, size, 0, 2 * Math.PI);\n  ctx.fillText(num, x, y);\n  ctx.stroke();\n  // if the node is clicked then change the background\n  if (isReady) {\n    ctx.fillStyle = \"rgba(0,255,0,.2)\";\n    ctx.fill();\n    ctx.fillStyle = \"black\";\n  }\n  ctx.closePath();\n}\n\nexport function getDist(x, y, x1, y1) {\n  return Math.sqrt((x1 - x) * (x1 - x) + (y1 - y) * (y1 - y));\n}\n\nexport function getCorrectPoints(x, y, x1, y1, size) {\n  let d = getDist(x, y, x1, y1);\n  let t = size / d,\n    t1 = (d - size) / d;\n  let xt = (1 - t) * x + t * x1,\n    x1t = (1 - t1) * x + t1 * x1,\n    yt = (1 - t) * y + t * y1,\n    y1t = (1 - t1) * y + t1 * y1;\n  return [xt, yt, x1t, y1t];\n}\n\nexport function checkIfOppEdgeExist(node1, node2) {\n  return node2.getEdge(node1.number);\n}\n\nexport function drawEdge(ctx, node1, node2, size) {\n  ctx.strokeStyle = \"#000\";\n\n  const x = node1.position.x,\n    y = node1.position.y,\n    x1 = node2.position.x,\n    y1 = node2.position.y;\n  let points = getCorrectPoints(x, y, x1, y1, UI.nodeSize);\n\n  let xt = points[0],\n    yt = points[1],\n    x1t = points[2],\n    y1t = points[3];\n  drawLineWithArrows(\n    ctx,\n    xt,\n    yt,\n    x1t,\n    y1t,\n    size,\n    UI.isDirected,\n    checkIfOppEdgeExist(node1, node2),\n    size,\n  );\n}\n\nexport function drawLineWithArrows(\n  ctx,\n  x0,\n  y0,\n  x1,\n  y1,\n  aLength,\n  arrow,\n  opp,\n  size,\n) {\n  let dx = x1 - x0;\n  let dy = y1 - y0;\n  let angle = Math.atan2(dy, dx);\n  let length = Math.sqrt(dx * dx + dy * dy);\n  let w = 8;\n  ctx.lineWidth = 1;\n  if (size < 9) w = 6;\n  ctx.translate(x0, y0);\n  ctx.rotate(angle);\n  ctx.beginPath();\n  ctx.moveTo(1, 1);\n  if (arrow) {\n    if (opp) ctx.quadraticCurveTo(length / 4, length / 4, length, 0);\n    else ctx.lineTo(length, 0);\n\n    ctx.moveTo(length - aLength, -w);\n    ctx.lineTo(length, 0);\n    if (opp) ctx.lineTo(length - aLength, w);\n    else ctx.lineTo(length - aLength, w);\n  } else {\n    ctx.lineTo(length, 0);\n  }\n  //\n  ctx.stroke();\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n}\n\n// function DrawWeight(ctx, xt, yt, x1t, y1t, x, y, w, h, txt) {\n//     ctx.beginPath();\n//     /**** weight****/\n//     ctx.font = \"15px arial\";\n//     ctx.fillStyle = \"#d7d7d7\";\n//     ctx.strokeStyle = \"#fff\";\n//     ctx.fill();\n//     ctx.fillRect(x, y, w, h);\n//     ctx.fillStyle = \"black\";\n//     ctx.strokeStyle = \"black\";\n//     ctx.textAlign = 'center';\n//     ctx.textBaseline = 'middle';\n//     ctx.fillText(txt, (xt + x1t) / 2, (yt + y1t) / 2);\n//     ctx.stroke();\n//     ctx.closePath();\n//\n// }\n","import { graph } from \"./index.js\";\nimport { pair } from \"./Canvas/Pair.js\";\nimport modal from \"./Canvas/Pop-Up/Modal.js\";\nimport { UI } from \"./UI\";\nimport { drawEdge, drawNode, getDist } from \"./Canvas/canvasFunctions\";\n/*\n * return x,y in respect to the given canvas (could work with other elements)\n * pass to every function in canvasGunction.js the UI.nodeSIze parameter\n * */\n\n/*\n * if the node in the pair remove it if not add it\n * */\nexport function toggleNode(node) {\n  for (let i = 0; i < 2; i++) {\n    if (pair.nodes[i] && node.equals(pair.nodes[i])) {\n      pair.nodes = [];\n      UI.fire();\n      return;\n    }\n  }\n\n  pair.add(node);\n  UI.fire();\n}\n\n// (check after refactoring >>> done)\nexport function isPointInNode(x, y) {\n  for (let node of graph.nodes.keys()) {\n    const d = getDist(x, y, node.position.x, node.position.y);\n    if (d <= UI.nodeSize) return node;\n  }\n  return false;\n}\n\n// (check after refactoring >>> done)\nexport let drawNodes = function (ctx) {\n  for (let node of graph.nodes.keys()) {\n    drawNode(ctx, node, node.number, node.color, UI.nodeSize);\n  }\n};\n\n// (check after refactoring >>> done)\nexport let drawEdges = function (ctx) {\n  for (let node of graph.nodes.keys()) {\n    for (let edge of node.edges) {\n      drawEdge(\n        ctx,\n        graph.getNode(edge.start),\n        graph.getNode(edge.end),\n        null,\n        UI.nodeSize,\n      );\n    }\n  }\n};\n\nexport let drawUI = function (canvas, ctx) {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawNodes(ctx, UI.nodeSize);\n  drawEdges(ctx, UI.nodeSize);\n  if (pair.nodes[0]) {\n    drawNode(ctx, pair.nodes[0], \"\", \"green\", UI.nodeSize, 1);\n  }\n};\n\nexport function handleWeightInput(value) {\n  UI.popupEdge.addWeight(Number(value));\n  graph.addEdge(UI.popupEdge.start, UI.popupEdge.end, Number(value));\n  if (!UI.isDirected)\n    graph.addEdge(UI.popupEdge.end, UI.popupEdge.start, Number(value));\n  UI.popupEdge = 0;\n\n  modal.close();\n}\n\n//**********************************\n","import { Graph } from \"./Canvas/Graph\";\nimport { drawUI } from \"./functions\";\nimport { UI } from \"./UI\";\n\n//...Initializing the UI and the Canvas variables\n\nexport const the_canvas = document.getElementById(\"main_canvas\");\n\nexport const graph = new Graph();\n\nif (the_canvas && the_canvas.getContext) {\n  the_canvas.width = window.innerWidth;\n  the_canvas.height = 0.87 * window.innerHeight;\n\n  const ctx = the_canvas.getContext(\"2d\");\n  if (ctx) {\n    drawUI(the_canvas, ctx);\n    UI.canvas = the_canvas;\n    UI.ctx = ctx;\n    UI.subscribe(drawUI);\n  }\n}\n","import modal from \"./Modal.js\";\nimport { graph } from \"../../index.js\";\nimport { UI } from \"../../UI\";\nexport function edgePopup(edge) {\n  /***** The container *****/\n  modal.insert_content(`\n        <div class=\"edges-container\"></div>\n    `);\n\n  let theContainer = document.querySelector(\".edges-container\");\n\n  /***** The Main three rows  *****/\n  addElements(\n    theContainer,\n    \"div\",\n    \"div\",\n    \"Start Node\",\n    \"End Node\",\n    [\"header\"],\n    [\"header\"],\n  );\n  addElements(\n    theContainer,\n    \"div\",\n    \"div\",\n    edge.start,\n    edge.end,\n    [\"edge-info\"],\n    [\"edge-info\"],\n  );\n  addElements(theContainer, \"div\", null, \"Weights\", null, [\"header\"], null);\n\n  /*****Weights******/\n  let weight = edge.weights;\n  for (let i of weight) {\n    addElements(\n      theContainer,\n      \"div\",\n      \"button\",\n      i,\n      \"Delete Weight\",\n      [\"edge-info\"],\n      [\"edge-info\", \"removeEdgeBtn\"],\n      edge,\n    );\n  }\n\n  /********Close Button *********/\n  let CloseButton = document.createElement(\"button\");\n  CloseButton.classList.add(\"confirm\");\n  CloseButton.innerText = \"Close\";\n  CloseButton.addEventListener(\"click\", () => {\n    modal.close();\n  });\n\n  theContainer.appendChild(CloseButton);\n\n  modal.open();\n}\n\nfunction addElements(\n  parent,\n  left,\n  right,\n  leftText,\n  rightText,\n  leftClass,\n  rightClass,\n  edge,\n) {\n  let container = document.createElement(\"div\");\n  container.classList.add(\"edge\");\n  let startNode1 = document.createElement(left);\n\n  for (let i of leftClass) startNode1.classList.add(i);\n\n  startNode1.innerText = leftText;\n  container.appendChild(startNode1);\n\n  if (right != null) {\n    let EndNode = document.createElement(right);\n    for (let i of rightClass) EndNode.classList.add(i);\n    EndNode.innerText = rightText;\n    if (right === \"button\") {\n      EndNode.addEventListener(\"click\", () => {\n        modal.close();\n        graph.removeEdge(edge.start, edge.end, leftText);\n        if (!UI.isDirected) graph.removeEdge(edge.end, edge.start, leftText);\n      });\n    }\n\n    container.appendChild(EndNode);\n  }\n\n  parent.appendChild(container);\n}\n","import { edgePopup } from \"./Pop-Up/edge-weights-pop-up.js\";\nimport { GraphPoint } from \"./Graph.js\";\nimport { graph } from \"../index.js\";\nimport {\n  checkIfOppEdgeExist,\n  drawEdge,\n  getCorrectPoints,\n} from \"./canvasFunctions\";\nimport { UI } from \"../UI\";\n\nexport function point_in_canvas(a_canvas, e) {\n  let the_canvas = a_canvas.getBoundingClientRect();\n  let x = e.clientX - the_canvas.left;\n  let y = e.clientY - the_canvas.top;\n  return new GraphPoint(x, y);\n}\n\n//....Types of edges\nconst LINE = \"LINE\";\nconst CURVE = \"CURVE\";\n//...find the type of an edge (check after refactoring >>> done)\nconst checkEdgeType = (edge) => {\n  if (\n    UI.isDirected &&\n    checkIfOppEdgeExist(graph.getNode(edge.start), graph.getNode(edge.end))\n  ) {\n    return CURVE;\n  } else {\n    return LINE;\n  }\n};\n//...Calc. the distance between two points\nconst distance = (point1, point2) => {\n  return Math.sqrt(\n    Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2),\n  );\n};\n//...check if point is on a line\nconst pointOnLine = (point, start, end) => {\n  const fromLine =\n    distance(point, start) + distance(point, end) - distance(start, end);\n  return fromLine < 0.1;\n};\n//...check if a point is on a curve (check after refactoring >>> done)\nconst checkCurve = (point, edge, ctx) => {\n  drawEdge(ctx, graph.getNode(edge.start), graph.getNode(edge.end), 60);\n  const found = ctx.isPointInStroke(point.x, point.y);\n  UI.fire();\n  return found;\n};\n//...check if the point clicked is on an edge (check after refactoring >>> done)\nconst pointOnEdge = (point, edge) => {\n  let start = graph.getNode(edge.start);\n  let end = graph.getNode(edge.end);\n  let [startX, startY, endX, endY] = getCorrectPoints(\n    start.position.x,\n    start.position.y,\n    end.position.x,\n    end.position.y,\n    UI.nodeSize,\n  );\n  start = new GraphPoint(startX, startY);\n  end = new GraphPoint(endX, endY);\n\n  const type = checkEdgeType(edge);\n\n  if (type === LINE) {\n    if (pointOnLine(point, start, end)) {\n      edgePopup(edge);\n      return true;\n    }\n  } else if (type === CURVE) {\n    if (checkCurve(point, edge, UI.ctx)) {\n      edgePopup(edge);\n      return true;\n    }\n  }\n  return false;\n};\n\n//...check all edges for a click (check after refactoring >>> done)\nexport const edgeClicked = (clickedPoint) => {\n  for (let node of graph.nodes.keys()) {\n    for (let edge of node.edges.keys()) {\n      if (pointOnEdge(clickedPoint, edge)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n","import { pair } from \"../../Canvas/Pair.js\";\nimport { UI } from \"../../UI\";\n\n/*\n - to change the color of node :\n 1-choose color\n 2-press add then choose a node\n\n -every node now has attribute called color\n -button becomes red when it has been pressed otherwise green\n\n */\n\nlet colorPicker = document.querySelector(\".addColor\");\n\nexport function toggleColorPicker() {\n  UI.nodePicked = !UI.nodePicked;\n  colorPicker.style.backgroundColor = UI.nodePicked ? \"#ef2626\" : \"#009879\";\n  if (!UI.nodePicked) return;\n  pair.nodes = [];\n  UI.fire();\n}\n\nexport function changeNodeColor(node, color) {\n  node.color = color;\n  UI.fire();\n}\ncolorPicker.addEventListener(\"click\", () => {\n  toggleColorPicker();\n});\n","import { the_canvas, graph } from \"../../index.js\";\nimport { pair } from \"../../Canvas/Pair.js\";\n\nimport { UI } from \"../../UI\";\n\n// the delete button style\nconst deleteButton = document.querySelector(\".delete\");\ndeleteButton.addEventListener(\"click\", (e) =>\n  deleteClickedHandler(e, the_canvas),\n);\n\n//-----------------\nconst deleteClickedHandler = (e, canvas) => {\n  canvas.classList.toggle(\"deleteCursor\");\n  e.target.classList.toggle(\"clicked\");\n\n  //Transform to Deletion Mode by removing all green node\n  const canvasClasses = document.querySelector(\"canvas\");\n  UI.delete = canvasClasses.classList.contains(\"deleteCursor\");\n  pair.nodes = [];\n  UI.fire();\n};\n\n/*delete the node and all edges connected with*/\n\n// (check after refactoring >>> done)\nexport function deleteElements(node) {\n  graph.removeNode(node.number);\n  UI.fire();\n}\n","import { graph, the_canvas } from \"../index.js\";\n\nimport { UI } from \"../UI\";\nimport { getDist } from \"../Canvas/canvasFunctions\";\n\n//READ that First\n/*\n -every node has a distance equal to 15 between any adjancent node\n - every depth has distance equal to 15 between any adjancent depth\n - every depth has a blocks define the positions which the node can be placed in\n - setXRootPosition(u) function define the position which the root will be placed in and i make it the center\n - setPosition() function : find the best positon from the parent node to this node in the block to make the bfs looks better\n\n\n\n\n\n */\nlet mxNodes = 0;\n\nfunction setXRootPosition(u) {\n  let width = the_canvas.width;\n  // strart position\n  let x = UI.nodeSize + 15;\n  // counter which counts the max number of node to be placed in one depth\n  let i = 1;\n  for (; i <= 1000000; i++) {\n    x += UI.nodeSize * 2 + 15;\n    if (x > width) break;\n  }\n  // i/2 which means the center of the row\n  u.position.x = UI.nodeSize + 15 + (i / 2) * (UI.nodeSize * 2 + 15);\n  //i is the max number of nodes can be placed in one row\n  mxNodes = i - 1;\n}\n\nfunction setPosition(u, v, dep, blocks) {\n  let width = the_canvas.width;\n  //start posiiton in the row\n  let x = UI.nodeSize + 15;\n  // the heght of the node\n  let y = dep * (UI.nodeSize + 5) * 2 + 15 * (dep - 1);\n  // 0 means the first blace then it increament in the loop\n  // the Condition here means if the first has occuped or not\n  let bestPosition = 0,\n    bestDitance =\n      blocks[0] === 0 ? getDist(x, y, u.position.x, u.position.y) : 10000000;\n  for (let i = 1; i <= mxNodes; i++) {\n    x += UI.nodeSize * 2 + 15;\n    if (blocks[i] !== 0) continue;\n    if (x > width) break;\n    if (getDist(x, y, u.position.x, u.position.y) < bestDitance) {\n      bestDitance = getDist(x, y, u.position.x, u.position.y);\n      bestPosition = i;\n    }\n  }\n  blocks[bestPosition] = 1;\n  x = bestPosition\n    ? UI.nodeSize + 15 + bestPosition * (UI.nodeSize * 2 + 15)\n    : UI.nodeSize + 15;\n  v.position.x = x;\n  v.position.y = y;\n}\n\nexport function DrawAsTree() {\n  // vis is the visited array which define if the node visited or not\n  let queue = [],\n    vis = new Array(graph.nodeCount + 1);\n  vis.fill(0);\n\n  let root = graph.getNode(1);\n  queue.push(root);\n  vis[1] = 1;\n  // depth counter and number of node in each depth , intially in first depth there is only one node which is root\n  let dep = 1,\n    sizeOfDepth = 1;\n  setXRootPosition(root);\n  root.position.y = dep * (UI.nodeSize + 5) * 2;\n  while (queue.length != 0) {\n    // imagine that we have matrix of size n*m which we will place the grapth in that matrix as every cell has one node\n    // blocks array  define the row with  size of maxNode possible and say if the cell has ocupped or not\n    let blocks = new Array(mxNodes + 1).fill(0);\n    for (let i = 1; i <= sizeOfDepth; i++) {\n      let u = queue.shift();\n      for (let i of u.edges.keys()) {\n        if (vis[i.end] === 0) {\n          vis[i.end] = 1;\n          let v = graph.getNode(i.end);\n          queue.push(v);\n          setPosition(u, v, dep + 1, blocks);\n        }\n      }\n    }\n    dep++;\n    sizeOfDepth = queue.length;\n  }\n  UI.fire();\n}\n","import { point_in_canvas } from \"../edge-clicked-handler.js\";\nimport { deleteElements } from \"../../sidebar/buttons/Delete.js\";\nimport { pair } from \"../Pair.js\";\nimport { UI } from \"../../UI\";\n\n// functions for the context menu for nodes\nexport function toggleMenu() {\n  if (UI.MENU_STATUS !== 1) {\n    UI.MENU_STATUS = 1;\n    document\n      .querySelector(\"#context-menu\")\n      .classList.add(\"context-menu-active\");\n  } else {\n    document\n      .querySelector(\"#context-menu\")\n      .classList.remove(\"context-menu-active\");\n    UI.MENU_STATUS = 0;\n  }\n}\n\nexport const position_menu = (e) => {\n  let menuPositionX = e.clientX + \"px\";\n  let menuPositionY = e.clientY + \"px\";\n  const menu = document.querySelector(\"#context-menu\");\n  menu.style.left = menuPositionX;\n  menu.style.top = menuPositionY;\n};\n\nexport const startMoveMode = () => {\n  toggleMenu();\n  UI.MovingMode = true;\n};\n\nexport const updateNodePosition = (e) => {\n  if (UI.MovingMode) {\n    UI.ContextMenuNode.position = point_in_canvas(UI.canvas, e);\n    UI.fire();\n  }\n};\n\nexport const stopMovingMode = () => {\n  UI.MovingMode = false;\n};\n\nexport const DeleteContextMenuNode = () => {\n  toggleMenu();\n  deleteElements(UI.ContextMenuNode);\n  pair.nodes = [];\n  UI.fire();\n};\n","import { point_in_canvas, edgeClicked } from \"./Canvas/edge-clicked-handler.js\";\nimport { the_canvas, graph } from \"./index.js\";\nimport { isPointInNode, toggleNode } from \"./functions.js\";\n\nimport { GraphPoint } from \"./Canvas/Graph.js\";\nimport {\n  changeNodeColor,\n  toggleColorPicker,\n} from \"./sidebar/buttons/color-picker.js\";\nimport { deleteElements } from \"./sidebar/buttons/Delete.js\";\nimport { DrawAsTree } from \"./Algorithms/Draw-as-tree.js\";\nimport {\n  startMoveMode,\n  stopMovingMode,\n  updateNodePosition,\n  DeleteContextMenuNode,\n  toggleMenu,\n  position_menu,\n} from \"./Canvas/ContextMenu/conterxt-menu.js\";\nimport { UI } from \"./UI\";\n//...listen to the canvas and handle clicks\nconst canvas = document.getElementById(\"main_canvas\");\n\n//...the canvas logic\nfunction handleClick(a_canvas, e) {\n  // if context-menu open >> close it\n  if (UI.MENU_STATUS === 1) return toggleMenu();\n\n  const clickedPoint = point_in_canvas(a_canvas, e);\n  //..close the popup\n  //...check if the clicked is an edge\n  if (edgeClicked(clickedPoint)) return;\n\n  //...check if the clicked is a node\n  const clickedNode = isPointInNode(clickedPoint.x, clickedPoint.y);\n  //separate the delete from drawing\n  if (clickedNode) {\n    if (UI.nodePicked) {\n      let color = document.querySelector(\".colorInput\").value;\n      changeNodeColor(clickedNode, color);\n      toggleColorPicker();\n    } else if (UI.delete) deleteElements(clickedNode);\n    else toggleNode(clickedNode);\n  } else {\n    // will fire all the subscribed functions (ex. update UI >>> which use drawNode)\n    if (!UI.delete)\n      graph.addNode(new GraphPoint(clickedPoint.x, clickedPoint.y));\n  }\n}\n\n// deals with the canvas-context-menu\nconst handleRightClick = (a_canvas, e) => {\n  // don`t  show the default context menu\n  e.preventDefault();\n  //...check if the clicked is a node\n  const clickedPoint = point_in_canvas(a_canvas, e);\n  const clickedNode = isPointInNode(clickedPoint.x, clickedPoint.y);\n  //separate the delete from drawing\n  if (clickedNode) {\n    toggleMenu();\n    position_menu(e);\n    UI.ContextMenuNode = clickedNode;\n  }\n};\n\n// Listen for the start and end of move mode + update the node position during it\ndocument.querySelector(\"#move\").addEventListener(\"click\", startMoveMode);\ndocument\n  .querySelector(\"#delete\")\n  .addEventListener(\"click\", DeleteContextMenuNode);\nUI.canvas.addEventListener(\"mousemove\", (e) => updateNodePosition(e));\nUI.canvas.addEventListener(\"click\", stopMovingMode);\n\n// handle right click (used for the moving of nodes)\ncanvas.addEventListener(\"contextmenu\", (e) => handleRightClick(the_canvas, e));\n// handle left click\ncanvas.addEventListener(\"click\", (e) => handleClick(the_canvas, e));\n\n// choosing between Directed and undirected edge\nconst BFSAlgo = document.querySelector(\".DrawAsTree\");\n\nBFSAlgo.addEventListener(\"click\", () => {\n  DrawAsTree();\n});\n","const toggle_button = document.querySelector(\".toolbox .toggle\");\nconst toolbox = document.querySelector(\".toolbox\");\n\nexport function resize_site() {\n  const sidebar = document.querySelector(\"#sidebar-space\");\n  sidebar.style.display = sidebar.style.display === \"block\" ? \"none\" : \"block\";\n  document.querySelector(\"body\").classList.toggle(\"sidebar-open-space\");\n}\n\ntoggle_button.onclick = () => {\n  toggle_button.classList.toggle(\"active_toolbox\");\n  toolbox.classList.toggle(\"active_toolbox\");\n\n  resize_site();\n};\n\ntoggle_button.click();\n","import { graph } from \"../../index.js\";\nimport { UI } from \"../../UI\";\n\nfunction convert_graph_into_text(graph) {\n  let edges = \"\";\n  let edgesCount = 0;\n\n  // taking the nodes count from the last node\n  let count = 0;\n\n  graph.nodes.forEach((node) => {\n    // update the  nodes count\n    count = node.number;\n\n    node.edges.forEach((edge) => {\n      edges += edge + \"\\n\";\n      edgesCount++;\n    });\n  });\n\n  const nodeCount = \"Nodes count: \" + count + \"\\n\";\n\n  edgesCount = \"Edges count: \" + edgesCount + \"\\n\";\n\n  return nodeCount + edgesCount + edges;\n}\n\nfunction download_file(fileName, fileUrl) {\n  const a = document.createElement(\"a\");\n  a.href = fileUrl;\n  a.download = fileName;\n  a.click();\n\n  URL.revokeObjectURL(a.href);\n}\n\n// save as image\nconst saveImgButton = document.querySelector(\".save-as-img\");\nsaveImgButton.addEventListener(\"click\", save_graph_as_img);\n\nfunction save_graph_as_img() {\n  try {\n    const url = UI.canvas.toDataURL(\"image/png\");\n\n    download_file(\"Graph-image.png\", url);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// save as .txt\nconst saveTxtButton = document.querySelector(\".save-as-txt\");\nsaveTxtButton.addEventListener(\"click\", save_graph_as_txt);\n\nexport function save_graph_as_txt() {\n  let graph_text = convert_graph_into_text(graph);\n\n  try {\n    const file = new Blob([graph_text], { type: \"text/plain\" });\n    const url = URL.createObjectURL(file);\n\n    download_file(\"Graph.txt\", url);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n","import { UI } from \"../../UI\";\n\nconst nodeSizeChange = document.querySelector(\".nodeSize\");\n\nnodeSizeChange.addEventListener(\"change\", (e) => {\n  e.stopPropagation();\n  // change the global node size\n  UI.nodeSize = parseInt(document.querySelector(\".nodeSize\").value);\n  // change the label of the range input\n  document.querySelector(\".nodeSizeLabel\").innerHTML = UI.nodeSize;\n  UI.fire();\n});\n\nconst weightedGraph = document.querySelector(\"#isWeighted[type=checkbox]\");\n\nweightedGraph.addEventListener(\"change\", () => {\n  UI.isWighted = !UI.isWighted;\n});\n\nexport const edge_direction = document.querySelector(\n  \"#edge-direction[type=checkbox]\",\n);\n\nedge_direction.addEventListener(\"change\", () => {\n  UI.isDirected = !UI.isDirected;\n  UI.fire();\n});\n","import { the_canvas, graph } from \"../../index.js\";\n\nimport { pair } from \"../../Canvas/Pair.js\";\n//Clear Button\ndocument.querySelector(\".clear\").addEventListener(\"click\", () => {\n  updateCanvas(the_canvas);\n});\n\n//---(check after refactoring >>> done)\nexport const updateCanvas = (canvas) => {\n  canvas.width = canvas.offsetWidth;\n  canvas.height = canvas.offsetHeight;\n\n  // clear the graph\n  graph.nodes = new Set();\n  graph.nodeCount = 1;\n  graph.availableNum = [];\n\n  pair.nodes = [];\n};\n","import modal from \"../../Canvas/Pop-Up/Modal.js\";\nimport { updateCanvas } from \"./Clear.js\";\nimport { graph } from \"../../index.js\";\nimport { GraphPoint } from \"../../Canvas/Graph.js\";\nimport { UI } from \"../../UI\";\n\n// when the user click the button show the matrix\ndocument.querySelector(\"#matrix-input\").addEventListener(\"click\", () => {\n  modal.insert_content(\n    `\n   <div id=\"matrix-size\">\n        <h3>Enter the Size(N) you want for your matrix</h3>\n        <input id=\"size\" type=\"number\" min=\"1\" max=\"8\" placeholder=\"N\">\n        <button id=\"create-matrix\" class=\"canvas_button\" type=\"submit\">Create Matrix</button>\n   </div>\n   <div id=\"matrix-table\"></div>\n   <button id=\"draw_matrix\" class=\"canvas_button\" type=\"button\">Draw Graph</button>\n`,\n  );\n\n  // draw the graph and close the matrix window when the button is clicked\n  document\n    .querySelector(\"#draw_matrix\")\n    .addEventListener(\"click\", () => draw_graph_from_matrix());\n\n  // create the matrix table when a valid size is entered and the button is clicked\n  document\n    .querySelector(\"#create-matrix\")\n    .addEventListener(\"click\", create_matrix);\n\n  modal.open(50);\n});\n\n// ensure the number of nodes are allowed\nconst is_valid_size = (size) => {\n  return size >= 1 && size <= 8;\n};\n\nconst create_table = (n) => {\n  const matrix_table = document.querySelector(\"#matrix-table\");\n\n  // clean any old tables\n  matrix_table.innerHTML = \"\";\n\n  // create new table\n  const table = document.createElement(\"table\");\n  table.setAttribute(\"border\", \"1\");\n\n  // create a header with the numbers of the columns\n  const thead = document.createElement(\"thead\");\n  const tr = document.createElement(\"tr\");\n  const td = document.createElement(\"td\");\n  td.innerText = \"-\";\n  tr.appendChild(td);\n\n  for (let j = 0; j < n; j++) {\n    const td = document.createElement(\"td\");\n    td.innerText = `${j + 1}`;\n    tr.appendChild(td);\n  }\n\n  thead.appendChild(tr);\n  table.appendChild(thead);\n\n  // create the matrix\n  const tbody = document.createElement(\"tbody\");\n\n  for (let i = 0; i < n; i++) {\n    const tr = document.createElement(\"tr\");\n\n    // adding the row number\n    const label = document.createElement(\"td\");\n    label.innerText = `${i + 1}`;\n    tr.appendChild(label);\n\n    // adding the cells\n    for (let j = 0; j < n; j++) {\n      const td = document.createElement(\"td\");\n      const input = document.createElement(\"input\");\n      input.type = \"number\";\n      input.id = `cell_${i + 1}_${j + 1}`;\n      input.value = \"0\";\n      td.appendChild(input);\n      tr.appendChild(td);\n    }\n\n    tbody.appendChild(tr);\n  }\n\n  table.appendChild(tbody);\n\n  matrix_table.appendChild(table);\n\n  // showing the draw graph button\n  document.querySelector(\"#draw_matrix\").style.display = \"block\";\n};\n\nexport const draw_graph_from_matrix = () => {\n  // clear the canvas\n  updateCanvas(UI.canvas);\n\n  // draw the nodes\n  // TODO : use the calcPosition function after the feature is implemented\n  let x = 100;\n  let y = 100;\n  let count = 0;\n  const nodes_count = document.querySelectorAll(\n    \"#matrix-table tbody tr\",\n  ).length;\n\n  for (let i = 1; i <= nodes_count; i++) {\n    if (count <= 4) {\n      x += 100;\n      graph.addNode(new GraphPoint(x, y));\n      count++;\n    } else {\n      x = 100;\n      y += 100;\n      graph.addNode(new GraphPoint(x, y));\n      count = 0;\n    }\n  }\n\n  // get all the edges weights and draws them(inputs inside td)\n  const table_cells = document.querySelectorAll(\n    \"#matrix-table table tbody td input\",\n  );\n\n  for (const cell of table_cells) {\n    const weight = Number(cell.value);\n\n    // don`t draw any zero weights\n    if (weight !== 0) {\n      const id_data = cell.id.split(\"_\");\n      const start = id_data[1];\n      const end = id_data[2];\n      graph.addEdge(Number(start), Number(end), weight);\n    }\n  }\n\n  // close the matrix window\n  modal.close();\n};\n\nexport const create_matrix = () => {\n  const size = document.querySelector(\"#size\").value;\n  if (is_valid_size(size)) create_table(size);\n  else\n    document.querySelector(\n      \"#matrix-table\",\n    ).innerHTML = `<h3 style=\"color: red\">Enter a valid Size</h3>`;\n};\n","import modal from \"../../Canvas/Pop-Up/Modal.js\";\nimport { updateCanvas } from \"./Clear.js\";\nimport { graph } from \"../../index.js\";\nimport { GraphPoint } from \"../../Canvas/Graph.js\";\nimport { UI } from \"../../UI\";\n\nfunction add_content() {\n  // add the html\n  modal.insert_content(\n    `\n<div id=\"textarea-content\">\n        <div id=\"textarea-errors\"></div>\n        <textarea id=\"graph_text\" name=\"graph_text\"\n                      placeholder=\"Enter the number of the nodes and edges on the first line\n[ex. N E]\nfollowed by E lines:\n    - In each line enter the starting node, ending node and optionally the weight (default value is 1)   \n        [ex. 1 2 4] or [1 2] >> will have weight of 1\n\"></textarea>\n\n        <button id=\"draw_graph_from_text\" class=\"canvas_button\" type=\"button\">Draw Graph</button>\n</div>\n        \n    `,\n  );\n\n  // draw the graph and close the modal window when the button is clicked\n  document\n    .querySelector(\"#draw_graph_from_text\")\n    .addEventListener(\"click\", () => {\n      draw_graph_from_text();\n    });\n}\n\n// when the user click the button show the modal\ndocument.querySelector(\"#textarea-input\").addEventListener(\"click\", () => {\n  add_content();\n  clear_errors();\n  modal.open();\n});\n\nfunction displayError(error) {\n  document.querySelector(\n    \"#textarea-errors\",\n  ).innerHTML = `<h3 style=\"color: red\">${error}</h3>`;\n}\n\nfunction clear_errors() {\n  document.querySelector(\"#textarea-errors\").innerHTML = \"\";\n}\n\nfunction draw_nodes_from_text(nodesNum) {\n  let x = 100;\n  let y = 100;\n  let count = 0;\n\n  for (let i = 1; i <= nodesNum; i++) {\n    if (count <= 4) {\n      x += 100;\n      graph.addNode(new GraphPoint(x, y));\n      count++;\n    } else {\n      x = 100;\n      y += 100;\n      graph.addNode(new GraphPoint(x, y));\n      count = 0;\n    }\n  }\n}\n\nfunction draw_edges_from_text(lines, nodesNum) {\n  for (let i = 1; i < lines.length; i++) {\n    // three case: 1. two nodes, two nodes and a weight, less than two nodes(error)\n    if (lines[i].length < 2) {\n      return \"each line should have at least two number separated by a space\";\n    } else {\n      let [start, end, weight] = lines[i].split(\" \");\n      start = Number(start);\n      end = Number(end);\n\n      if (is_valid_nodes(start, end, nodesNum))\n        if (weight) {\n          graph.addEdge(start, end, Number(weight));\n          if (!UI.isDirected) graph.addEdge(end, start, Number(weight));\n        } else {\n          graph.addEdge(start, end);\n          if (!UI.isDirected) graph.addEdge(end, start);\n        }\n      else return `Invalid Node Number on line ${i + 1}`;\n    }\n  }\n}\n\n// make sure that the node numbers are valid and less than the Nodes Count\nfunction is_valid_nodes(start, end, nodesNum) {\n  return (\n    Number.isInteger(start) &&\n    Number.isInteger(end) &&\n    start <= nodesNum &&\n    end <= nodesNum &&\n    start > 0 &&\n    end > 0\n  );\n}\n\nexport const draw_graph_from_text = () => {\n  // clear the canvas\n  updateCanvas(UI.canvas);\n\n  // get the text from the textarea\n  const text = document.querySelector(\"#graph_text\").value;\n\n  // split the text into array of the lines\n  const lines = text.split(/\\n/);\n\n  // first line should have the 2 Integers\n  let [nodesNum, edgesNum] = lines[0].split(\" \");\n\n  try {\n    nodesNum = parseInt(nodesNum);\n    edgesNum = parseInt(edgesNum);\n  } catch (err) {\n    return displayError(\"Enter valid number for the nodes and edges count\");\n  }\n\n  // the number of lines should be at least number of edges + the first line\n  if (lines.length !== edgesNum + 1)\n    return displayError(\n      \"the number of edge defined should be equaled to the edges count \",\n    );\n\n  draw_nodes_from_text(nodesNum);\n\n  const error = draw_edges_from_text(lines, nodesNum);\n  if (error) return displayError(error);\n\n  // close the pop-up\n  modal.close();\n};\n"],"names":["modal","content","this","insert_content","pop_up","document","getElementById","close_icon","querySelector","onclick","style","display","window","event","target","innerHTML","size","changeSize","click","width","Object","freeze","ctx","canvas","isDirected","isWighted","popupEdge","observers","MENU_STATUS","ContextMenuNode","MovingMode","nodeSize","nodePicked","fn","push","fnToRemove","filter","forEach","GraphPoint","x","y","startNodeNumber","endNodeNumber","start","end","weights","Set","weight","add","otherEdge","join","GraphNode","position","nodeNumber","number","color","edges","edge","getEdge","newEdge","GraphEdge","addWeight","removeWeight","endNumber","keys","e","endNode","removeEdge","otherNode","nodes","nodeCount","availableNum","length","splice","newNode","UI","fire","node","n","getNode","addEdge","removed","Graph","point","graph","addEventListener","keyCode","handleWeightInput","value","drawNode","isReady","beginPath","lineWidth","strokeStyle","textAlign","textBaseline","font","arc","Math","PI","fillText","num","stroke","fillStyle","fill","closePath","getDist","sqrt","x1","y1","getCorrectPoints","d","t","t1","checkIfOppEdgeExist","node2","node1","drawEdge","points","drawLineWithArrows","aLength","dx","x0","dy","y0","angle","atan2","w","translate","rotate","moveTo","arrow","opp","quadraticCurveTo","lineTo","setTransform","isPointInNode","drawUI","clearRect","height","drawNodes","drawEdges","pair","Number","the_canvas","getContext","innerWidth","innerHeight","subscribe","theContainer","addElements","CloseButton","createElement","classList","innerText","appendChild","parent","left","right","leftText","rightText","leftClass","rightClass","container","startNode1","i","EndNode","point_in_canvas","a_canvas","getBoundingClientRect","clientX","clientY","top","LINE","CURVE","distance","point1","point2","pow","pointOnEdge","startX","startY","endX","endY","type","checkEdgeType","pointOnLine","edgePopup","found","isPointInStroke","checkCurve","colorPicker","backgroundColor","toggleColorPicker","deleteClickedHandler","toggle","canvasClasses","delete","contains","deleteElements","removeNode","mxNodes","setPosition","u","v","dep","blocks","bestPosition","bestDitance","remove","startMoveMode","toggleMenu","DeleteContextMenuNode","updateNodePosition","stopMovingMode","preventDefault","clickedPoint","clickedNode","position_menu","menuPositionX","menuPositionY","menu","handleRightClick","changeNodeColor","edgeClicked","equals","toggleNode","addNode","handleClick","queue","vis","Array","root","sizeOfDepth","setXRootPosition","shift","DrawAsTree","toggle_button","toolbox","download_file","fileName","fileUrl","a","href","download","URL","revokeObjectURL","sidebar","toDataURL","error","graph_text","edgesCount","count","convert_graph_into_text","file","Blob","createObjectURL","stopPropagation","parseInt","edge_direction","updateCanvas","offsetWidth","offsetHeight","draw_graph_from_matrix","create_matrix","nodes_count","querySelectorAll","cell","id_data","id","split","is_valid_size","matrix_table","table","setAttribute","thead","tr","td","j","tbody","label","input","create_table","displayError","is_valid_nodes","nodesNum","isInteger","draw_graph_from_text","lines","edgesNum","err","draw_nodes_from_text","draw_edges_from_text"],"sourceRoot":""}