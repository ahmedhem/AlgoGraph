{"version":3,"sources":["webpack://AlgoGraph/./src/Canvas/Graph.js","webpack://AlgoGraph/./src/Canvas/Pair.js","webpack://AlgoGraph/./src/Canvas/Pop-Up/Modal.js","webpack://AlgoGraph/./src/Canvas/Pop-Up/weighted-edge-input-pop-up.js","webpack://AlgoGraph/./src/UI.js","webpack://AlgoGraph/./src/functions.js","webpack://AlgoGraph/./src/index.js","webpack://AlgoGraph/webpack/bootstrap","webpack://AlgoGraph/webpack/runtime/define property getters","webpack://AlgoGraph/webpack/runtime/hasOwnProperty shorthand","webpack://AlgoGraph/webpack/runtime/make namespace object","webpack://AlgoGraph/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,WAAW,OAAO,SAAS,cAAc,EAAE,SAAS;AAC3E;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,C;;;;;;;;;;;;;;;;;ACpLiE;AAC/B;AACG;;AAE9B;AACP;AACA;AACA;AACA;AACA,2BAA2B,oDAAa;;AAExC;AACA,kDAAkD,gDAAS;;AAE3D;AACA,8BAA8B,gFAAS;AACvC;AACA,gBAAgB,oDAAa;AAC7B,kCAAkC,oDAAa;;AAE/C;;AAEA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,E;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AA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","file":"bundle.js","sourcesContent":["export class GraphPoint {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n\r\nexport class GraphEdge {\r\n    constructor(startNodeNumber, endNodeNumber) {\r\n        this.start = startNodeNumber;\r\n        this.end = endNodeNumber;\r\n        //...do not allow duplicate values\r\n        this.weights = new Set();\r\n    }\r\n\r\n    addWeight(weight) {\r\n        return this.weights.add(weight);\r\n    }\r\n\r\n    removeWeight(weight) {\r\n        this.weights.delete(weight);\r\n        if (this.weights.size === 0) return -1;\r\n    }\r\n\r\n    equals(otherEdge) {\r\n        return this.start === otherEdge.start && this.end === otherEdge.end;\r\n    }\r\n\r\n    toString() {\r\n        const weights = [...this.weights].join(', ');\r\n        return `from ${this.start} to  ${this.end} with weight {${weights}}`\r\n    }\r\n}\r\n\r\n\r\nclass GraphNode {\r\n    constructor(position, nodeNumber) {\r\n        this.position = position;\r\n        this.number = nodeNumber;\r\n        this.color = \"#000\";\r\n        this.edges = new Set();\r\n    }\r\n\r\n    addEdge(endNodeNumber, weight = 1) {\r\n        const edge = this.getEdge(endNodeNumber);\r\n        if (!edge) {\r\n            const newEdge = new GraphEdge(this.number, endNodeNumber);\r\n            newEdge.addWeight(weight);\r\n\r\n            this.edges.add(newEdge);\r\n            return true;\r\n        }\r\n\r\n        edge.addWeight(weight);\r\n        return true;\r\n    }\r\n\r\n    //...if called without a weight remove the entire edge\r\n    //...with a weight remove the weight\r\n    removeEdge(endNodeNumber, weight) {\r\n        const edge = this.getEdge(endNodeNumber);\r\n        if (edge) {\r\n            if (weight) {\r\n                let rem = edge.removeWeight(weight);\r\n                if (rem === -1) this.edges.delete(edge);\r\n            } else {\r\n                this.edges.delete(edge);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false\r\n\r\n    }\r\n\r\n    getEdge(endNumber) {\r\n        let edge = null;\r\n        for (let e of this.edges.keys()) {\r\n            if (e.end === endNumber) {\r\n                edge = e;\r\n            }\r\n        }\r\n        return edge;\r\n    }\r\n\r\n    //...remove all the edges between two nodes\r\n    removeConnection(endNode) {\r\n        this.removeEdge(endNode);\r\n        endNode.removeEdge(this);\r\n    }\r\n\r\n    equals(otherNode) {\r\n        return this.number === otherNode.number;\r\n    }\r\n\r\n    toString() {\r\n        return this.number;\r\n    }\r\n}\r\n\r\n\r\nexport class Graph {\r\n    constructor() {\r\n        this.nodes = new Set();\r\n        this.nodeCount = 1;\r\n        this.availableNum = [];\r\n    }\r\n\r\n    addNode(position) {\r\n        let nodeNumber = null;\r\n        if (this.availableNum.length !== 0) {\r\n            nodeNumber = this.availableNum[0];\r\n            this.availableNum.splice(0, 1);\r\n        } else {\r\n            nodeNumber = this.nodeCount;\r\n        }\r\n        const newNode = new GraphNode(position, nodeNumber);\r\n        this.nodes.add(newNode);\r\n        this.nodeCount++;\r\n        UI.fire();\r\n    }\r\n\r\n    getNode(number) {\r\n        let node = null;\r\n\r\n        for (let n of this.nodes.keys()) {\r\n            if (n.number === number)\r\n                node = n;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    removeNode(number) {\r\n        const node = this.getNode(number);\r\n        const nodeNumber = node.number;\r\n        for (let n of this.nodes.keys()) {\r\n            for (let e of n.edges.keys()) {\r\n                if (e.end === nodeNumber) {\r\n                    this.removeEdge(e.start, e.end);\r\n                }\r\n            }\r\n        }\r\n        this.availableNum.push(nodeNumber)\r\n        this.nodes.delete(node);\r\n        this.nodeCount--;\r\n        UI.fire();\r\n    }\r\n\r\n    addEdge(startNodeNumber, endNodeNumber, weight = 1) {\r\n        const start = this.getNode(startNodeNumber);\r\n        const end = this.getNode(endNodeNumber);\r\n\r\n        if (start && end) {\r\n            start.addEdge(end.number, weight);\r\n            UI.fire();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    removeEdge(startNodeNumber, endNodeNumber, weight) {\r\n        const start = this.getNode(startNodeNumber);\r\n        const end = this.getNode(endNodeNumber);\r\n        const removed = start.removeEdge(end.number, weight);\r\n        if (removed)\r\n            UI.fire();\r\n        return removed;\r\n\r\n    }\r\n\r\n    getEdge(startNodeNumber, endNodeNumber) {\r\n        const start = this.getNode(startNodeNumber);\r\n        const end = this.getNode(endNodeNumber);\r\n\r\n        return start.getEdge(end.number);\r\n    }\r\n\r\n}","import {openPopup} from \"./Pop-Up/weighted-edge-input-pop-up.js\";\r\nimport {graph} from \"../index.js\";\r\nimport {GraphEdge} from \"./Graph.js\";\r\n\r\nexport let pair = {\r\n    nodes: [],\r\n    add: function (point) {\r\n        if (this.nodes.length === 1) {\r\n            this.nodes.push(point);\r\n            UI.popupEdge = graph.getEdge(this.nodes[0].number, this.nodes[1].number);\r\n\r\n            /***Create new Edge if first time***/\r\n            if (!UI.popupEdge) UI.popupEdge = new GraphEdge(this.nodes[0].number, this.nodes[1].number);\r\n\r\n            /***check if weighted or un weighted ****/\r\n            if (UI.isWighted) openPopup();\r\n            else {\r\n                graph.addEdge(this.nodes[0].number, this.nodes[1].number);\r\n                if(!UI.isDirected)graph.addEdge(this.nodes[1].number, this.nodes[0].number);\r\n\r\n            }\r\n\r\n            this.nodes = [];\r\n        } else {\r\n            this.nodes.push(point);\r\n        }\r\n    },\r\n};","class Modal {\r\n    constructor(content = '') {\r\n        this.content = content\r\n        this.insert_content(content)\r\n\r\n        this.pop_up = document.getElementById(\"Modal\");\r\n\r\n        // when the close icon is clicked close the pop-up\r\n        this.close_icon = document.querySelector(\".hide-Modal\");\r\n        this.close_icon.onclick = () => this.pop_up.    style.display = \"none\";\r\n\r\n\r\n        // add eventListener to close the pop-up when the background is clicked\r\n        window.onclick = (event) => {\r\n            if (event.target === this.pop_up)\r\n                this.pop_up.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    insert_content(content) {\r\n        document.querySelector(\"#inserted-content\").innerHTML = content;\r\n    }\r\n\r\n    open (size = 80) {\r\n        // reset the size of the pop-up to 80%\r\n        this.changeSize(size)\r\n        // show the pop-up\r\n        this.pop_up.style.display = 'block'\r\n\r\n    }\r\n\r\n    close () {\r\n        this.changeSize(80)\r\n        this.close_icon.click()\r\n    }\r\n\r\n    // default size is 80%, Min. = 30 and max. 100\r\n    changeSize(width) {\r\n        if (width >= 40 && width <= 100) {\r\n            document.querySelector(\".Modal-content\").style.width = width + \"%\";\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n}\r\n\r\n// make it a singleton\r\nconst modal = new Modal()\r\nObject.freeze(modal)\r\n\r\nexport default modal;\r\n","import modal from \"./Modal.js\";\r\nimport {handleWeightInput} from \"../../functions.js\";\r\n\r\nexport function openPopup() {\r\n    modal.insert_content(`\r\n        <div class=\"weight-container\">\r\n            <span id=\"weight-input-text\">Want to Add a weight?</span>\r\n            <input id=\"weight-input\" class=\"\" type=\"number\" min=\"0\" value=\"1\">\r\n            <button type=\"submit\" class=\"btn cancel\">Confirm</button>\r\n        </div>\r\n    `)\r\n\r\n    //..listing for enter clicks in the popup input field\r\n    document.querySelector('#weight-input').addEventListener('keyup', (e) => {\r\n        if (e.keyCode === 13) {\r\n            const value = e.target.value;\r\n            handleWeightInput(value);\r\n            e.target.value = 1;\r\n        }\r\n    });\r\n\r\n    document.querySelector(\".cancel\").addEventListener('click', (e) => {\r\n        let value = document.querySelector('#weight-input').value;\r\n        handleWeightInput(value);\r\n        document.querySelector(\"#weight-input\").value = 1;\r\n    });\r\n\r\n\r\n    modal.open()\r\n    modal.changeSize(50)\r\n}\r\n\r\n\r\n","// the UI notifier\r\nclass UiNotifier {\r\n    constructor() {\r\n        this.ctx = null;\r\n        this.canvas = null;\r\n        this.delete = false;\r\n        this.isDirected = false;\r\n        this.isWighted = false;\r\n        this.popupEdge = null;\r\n        this.observers = [];\r\n        // context menu\r\n        this.MENU_STATUS = 0;\r\n        this.ContextMenuNode = null;\r\n        this.MovingMode = false;\r\n        //default size\r\n        this.nodeSize = 15;\r\n        this.nodePicked = null;\r\n    }\r\n\r\n    subscribe(fn) {\r\n        this.observers.push(fn);\r\n    }\r\n\r\n    unsubscribe(fnToRemove) {\r\n        this.observers = this.observers.filter(fn => {\r\n            if (fn !== fnToRemove)\r\n                return fn;\r\n        });\r\n    }\r\n\r\n    fire() {\r\n        this.observers.forEach(fn => {\r\n            fn(this.canvas, this.ctx, this.nodeSize);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const UI = new UiNotifier();\r\n\r\n","import {graph} from \"./index.js\";\r\nimport {pair} from \"./Canvas/Pair.js\";\r\nimport modal from \"./Canvas/Pop-Up/Modal.js\";\r\nimport {UI} from \"./UI\";\r\n/*\r\n* return x,y in respect to the given canvas (could work with other elements)\r\n* pass to every function in canvasGunction.js the UI.nodeSIze parameter\r\n* */\r\n\r\n\r\n/*\r\n* if the node in the pair remove it if not add it\r\n* */\r\nexport function toggleNode(node) {\r\n    for (let i = 0; i < 2; i++) {\r\n        if (pair.nodes[i] && node.equals(pair.nodes[i])) {\r\n            pair.nodes = [];\r\n            UI.fire();\r\n            return;\r\n        }\r\n    }\r\n\r\n    pair.add(node);\r\n    UI.fire();\r\n}\r\n\r\n\r\n// (check after refactoring >>> done)\r\nexport function isPointInNode(x, y) {\r\n    for (let node of graph.nodes.keys()) {\r\n        const d = getDist(x, y, node.position.x, node.position.y);\r\n        if (d <= UI.nodeSize)\r\n            return node;\r\n    }\r\n    return false;\r\n}\r\n\r\n// (check after refactoring >>> done)\r\nexport let drawNodes = function (ctx) {\r\n    for (let node of graph.nodes.keys()) {\r\n        drawNode(ctx, node, node.number, node.color, UI.nodeSize);\r\n    }\r\n}\r\n\r\n// (check after refactoring >>> done)\r\nexport let drawEdges = function (ctx) {\r\n    for (let node of graph.nodes.keys()) {\r\n        for (let edge of node.edges) {\r\n            drawEdge(ctx, graph.getNode(edge.start), graph.getNode(edge.end), null, UI.nodeSize)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport let drawUI = function (canvas, ctx) {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    drawNodes(ctx, UI.nodeSize);\r\n    drawEdges(ctx, UI.nodeSize);\r\n    if (pair.nodes[0]) {\r\n        drawNode(ctx, pair.nodes[0], \"\", 'green', UI.nodeSize, 1);\r\n    }\r\n}\r\n\r\nexport function handleWeightInput(value) {\r\n    UI.popupEdge.addWeight(Number(value));\r\n    graph.addEdge(UI.popupEdge.start, UI.popupEdge.end, Number(value));\r\n    if (!UI.isDirected)\r\n        graph.addEdge(UI.popupEdge.end, UI.popupEdge.start, Number(value));\r\n    UI.popupEdge = 0;\r\n\r\n    modal.close()\r\n}\r\n\r\n\r\n//**********************************\r\n","import {Graph} from \"./Canvas/Graph\";\r\nimport {drawUI} from \"./functions\";\r\n// the new imports just to build a dependence graph\r\nimport {UI} from \"./UI\";\r\n// import * as listeners from \"./listeners\"\r\n// import dragElement from \"./utils/DragElement\"\r\n// import {DrawAsTree} from \"./Algorithms/Draw-as-tree\";\r\n// import {save_graph_as_txt} from \"./sidebar/buttons/Save\";\r\n// import {updateCanvas} from \"./sidebar/buttons/Clear\";\r\n// import {deleteElements} from \"./sidebar/buttons/Delete\";\r\n// import {draw_graph_from_text} from \"./sidebar/buttons/textInput\";\r\n// import {toggleColorPicker} from \"./sidebar/buttons/color-picker\";\r\n// import {edge_direction} from \"./sidebar/buttons/GraphSetting\";\r\n// import {create_matrix} from \"./sidebar/buttons/matrix-input\";\r\n// import {resize_site} from \"./sidebar/toolbox\";\r\n// import modal from \"./Canvas/Pop-Up/Modal\";\r\n// import {edgePopup} from \"./Canvas/Pop-Up/edge-weights-pop-up\";\r\n// import {openPopup} from \"./Canvas/Pop-Up/weighted-edge-input-pop-up\";\r\n// import {pair} from \"./Canvas/Pair\";\r\n// import {GraphEdge} from \"./Canvas/Graph\";\r\n// import {position_menu} from \"./Canvas/ContextMenu/conterxt-menu\";\r\n// import {drawLineWithArrows} from \"./Canvas/canvasFunctions\";\r\n// import {point_in_canvas} from \"./Canvas/edge-clicked-handler\";\r\n//\r\n// // the css files\r\n// import \"../css/index.css\";\r\n// import \"../css/toolbox.css\";\r\n// import \"../css/tooltip.css\";\r\n//\r\n// // the static files\r\n// import image from \"../assets/images/graph.png\";\r\n// import image1 from \"../assets/images/logo.png\";\r\n// import image2 from \"../assets/images/logo1.png\";\r\n// import image3 from \"../assets/images/logo2.png\";\r\n// import svg1 from \"../assets/icons/administration.svg\"\r\n// // other svg files\r\n\r\n\r\n//...Initializing the UI and the Canvas variables\r\n\r\n\r\nexport const the_canvas = document.getElementById('main_canvas');\r\n\r\nexport const graph = new Graph();\r\n\r\nif (the_canvas && the_canvas.getContext) {\r\n    the_canvas.width = window.innerWidth;\r\n    the_canvas.height =  0.87 *  window.innerHeight;\r\n\r\n    const ctx = the_canvas.getContext('2d');\r\n    if (ctx) {\r\n        drawUI(the_canvas, ctx);\r\n        UI.canvas = the_canvas;\r\n        UI.ctx = ctx;\r\n        UI.subscribe(drawUI);\r\n\r\n    }\r\n}\r\n\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}